// DO NOT EDIT: This file is autogenerated via the builtin command.

package aggregate

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   82,
				},
				File:   "aggregate.flux",
				Source: "package aggregate\n\nimport \"contrib/jsternberg/math\"\n\n// table will aggregate columns and create tables with a single\n// row containing the aggregated value.\n//\n// This function takes a single parameter of `columns`. The parameter\n// is an object with the output column name as the key and the aggregate\n// object as the value.\n//\n// The aggregate object is composed of at least the following required attributes:\n//     column = string\n//         The column name for the input.\n//     init = (values) -> state\n//         An initial function to compute the initial state of the\n//         output. This can return either the final aggregate or a\n//         temporary state object that can be used to compute the\n//         final aggregate. The values parameter will always be a\n//         non-empty array of values from the specified column.\n//     reduce = (values, state) -> state\n//         A function that takes in another buffer of values\n//         and the current state of the aggregate and computes\n//         the updated state.\n//     compute = (state) -> value\n//         A function that takes the state and computes the final\n//         aggregate.\n//\n// An example of usage is:\n//     tables |> aggregate.table(columns: {\n//         \"min_bottom_degrees\": aggregate.min(column: \"bottom_degrees\"),\n//     ])\nbuiltin table\n\n_make_selector = (column, fn) => ({\n\tcolumn: column,\n\tinit: fn,\n\treduce: (values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t},\n\tcompute: (state) => state,\n})\n\n// min constructs a min aggregate or selector for the column.\nmin = (column) => _make_selector(column: column, fn: math.min)\n\n// max constructs a max aggregate or selector for the column.\nmax = (column) => _make_selector(column: column, fn: math.max)\n\n// sum constructs a sum aggregate for the column.\nsum = (column) => ({\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n})\n\n// count constructs a count aggregate for the column.\ncount = (column) => ({\n\tcolumn: column,\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n})\n\n// mean constructs a mean aggregate for the column.\nmean = (column) => ({\n\tcolumn: column,\n\tinit: (values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t}),\n\treduce: (values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t}),\n\tcompute: (state) => float(v: state.sum) / float(v: state.count),\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   33,
					},
					File:   "aggregate.flux",
					Source: "builtin table",
					Start: ast.Position{
						Column: 1,
						Line:   33,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   33,
						},
						File:   "aggregate.flux",
						Source: "table",
						Start: ast.Position{
							Column: 9,
							Line:   33,
						},
					},
				},
				Name: "table",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   43,
					},
					File:   "aggregate.flux",
					Source: "_make_selector = (column, fn) => ({\n\tcolumn: column,\n\tinit: fn,\n\treduce: (values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t},\n\tcompute: (state) => state,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   35,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   35,
						},
						File:   "aggregate.flux",
						Source: "_make_selector",
						Start: ast.Position{
							Column: 1,
							Line:   35,
						},
					},
				},
				Name: "_make_selector",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   43,
						},
						File:   "aggregate.flux",
						Source: "(column, fn) => ({\n\tcolumn: column,\n\tinit: fn,\n\treduce: (values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t},\n\tcompute: (state) => state,\n})",
						Start: ast.Position{
							Column: 18,
							Line:   35,
						},
					},
				},
				Body: &ast.ParenExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   43,
							},
							File:   "aggregate.flux",
							Source: "({\n\tcolumn: column,\n\tinit: fn,\n\treduce: (values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t},\n\tcompute: (state) => state,\n})",
							Start: ast.Position{
								Column: 34,
								Line:   35,
							},
						},
					},
					Expression: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 2,
									Line:   43,
								},
								File:   "aggregate.flux",
								Source: "{\n\tcolumn: column,\n\tinit: fn,\n\treduce: (values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t},\n\tcompute: (state) => state,\n}",
								Start: ast.Position{
									Column: 35,
									Line:   35,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   36,
									},
									File:   "aggregate.flux",
									Source: "column: column",
									Start: ast.Position{
										Column: 2,
										Line:   36,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   36,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 2,
											Line:   36,
										},
									},
								},
								Name: "column",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   36,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 10,
											Line:   36,
										},
									},
								},
								Name: "column",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   37,
									},
									File:   "aggregate.flux",
									Source: "init: fn",
									Start: ast.Position{
										Column: 2,
										Line:   37,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   37,
										},
										File:   "aggregate.flux",
										Source: "init",
										Start: ast.Position{
											Column: 2,
											Line:   37,
										},
									},
								},
								Name: "init",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   37,
										},
										File:   "aggregate.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 8,
											Line:   37,
										},
									},
								},
								Name: "fn",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   41,
									},
									File:   "aggregate.flux",
									Source: "reduce: (values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t}",
									Start: ast.Position{
										Column: 2,
										Line:   38,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   38,
										},
										File:   "aggregate.flux",
										Source: "reduce",
										Start: ast.Position{
											Column: 2,
											Line:   38,
										},
									},
								},
								Name: "reduce",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 3,
											Line:   41,
										},
										File:   "aggregate.flux",
										Source: "(values, state) => {\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t}",
										Start: ast.Position{
											Column: 10,
											Line:   38,
										},
									},
								},
								Body: &ast.Block{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 3,
												Line:   41,
											},
											File:   "aggregate.flux",
											Source: "{\n\t\tv = fn(values)\n\t\treturn fn(values: [state, v])\n\t}",
											Start: ast.Position{
												Column: 29,
												Line:   38,
											},
										},
									},
									Body: []ast.Statement{&ast.VariableAssignment{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   39,
												},
												File:   "aggregate.flux",
												Source: "v = fn(values)",
												Start: ast.Position{
													Column: 3,
													Line:   39,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 4,
														Line:   39,
													},
													File:   "aggregate.flux",
													Source: "v",
													Start: ast.Position{
														Column: 3,
														Line:   39,
													},
												},
											},
											Name: "v",
										},
										Init: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   39,
														},
														File:   "aggregate.flux",
														Source: "values",
														Start: ast.Position{
															Column: 10,
															Line:   39,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   39,
															},
															File:   "aggregate.flux",
															Source: "values",
															Start: ast.Position{
																Column: 10,
																Line:   39,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   39,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 10,
																	Line:   39,
																},
															},
														},
														Name: "values",
													},
													Value: nil,
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   39,
													},
													File:   "aggregate.flux",
													Source: "fn(values)",
													Start: ast.Position{
														Column: 7,
														Line:   39,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 9,
															Line:   39,
														},
														File:   "aggregate.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 7,
															Line:   39,
														},
													},
												},
												Name: "fn",
											},
										},
									}, &ast.ReturnStatement{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   40,
														},
														File:   "aggregate.flux",
														Source: "values: [state, v]",
														Start: ast.Position{
															Column: 13,
															Line:   40,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   40,
															},
															File:   "aggregate.flux",
															Source: "values: [state, v]",
															Start: ast.Position{
																Column: 13,
																Line:   40,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   40,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 13,
																	Line:   40,
																},
															},
														},
														Name: "values",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   40,
																},
																File:   "aggregate.flux",
																Source: "[state, v]",
																Start: ast.Position{
																	Column: 21,
																	Line:   40,
																},
															},
														},
														Elements: []ast.Expression{&ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   40,
																	},
																	File:   "aggregate.flux",
																	Source: "state",
																	Start: ast.Position{
																		Column: 22,
																		Line:   40,
																	},
																},
															},
															Name: "state",
														}, &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   40,
																	},
																	File:   "aggregate.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 29,
																		Line:   40,
																	},
																},
															},
															Name: "v",
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   40,
													},
													File:   "aggregate.flux",
													Source: "fn(values: [state, v])",
													Start: ast.Position{
														Column: 10,
														Line:   40,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   40,
														},
														File:   "aggregate.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   40,
														},
													},
												},
												Name: "fn",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   40,
												},
												File:   "aggregate.flux",
												Source: "return fn(values: [state, v])",
												Start: ast.Position{
													Column: 3,
													Line:   40,
												},
											},
										},
									}},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   38,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 11,
												Line:   38,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   38,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 11,
													Line:   38,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   38,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 19,
												Line:   38,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   38,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 19,
													Line:   38,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   42,
									},
									File:   "aggregate.flux",
									Source: "compute: (state) => state",
									Start: ast.Position{
										Column: 2,
										Line:   42,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   42,
										},
										File:   "aggregate.flux",
										Source: "compute",
										Start: ast.Position{
											Column: 2,
											Line:   42,
										},
									},
								},
								Name: "compute",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   42,
										},
										File:   "aggregate.flux",
										Source: "(state) => state",
										Start: ast.Position{
											Column: 11,
											Line:   42,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   42,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 22,
												Line:   42,
											},
										},
									},
									Name: "state",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   42,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 12,
												Line:   42,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   42,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 12,
													Line:   42,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}},
						With: nil,
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   35,
							},
							File:   "aggregate.flux",
							Source: "column",
							Start: ast.Position{
								Column: 19,
								Line:   35,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   35,
								},
								File:   "aggregate.flux",
								Source: "column",
								Start: ast.Position{
									Column: 19,
									Line:   35,
								},
							},
						},
						Name: "column",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   35,
							},
							File:   "aggregate.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 27,
								Line:   35,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   35,
								},
								File:   "aggregate.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 27,
									Line:   35,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 63,
						Line:   46,
					},
					File:   "aggregate.flux",
					Source: "min = (column) => _make_selector(column: column, fn: math.min)",
					Start: ast.Position{
						Column: 1,
						Line:   46,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   46,
						},
						File:   "aggregate.flux",
						Source: "min",
						Start: ast.Position{
							Column: 1,
							Line:   46,
						},
					},
				},
				Name: "min",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 63,
							Line:   46,
						},
						File:   "aggregate.flux",
						Source: "(column) => _make_selector(column: column, fn: math.min)",
						Start: ast.Position{
							Column: 7,
							Line:   46,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   46,
								},
								File:   "aggregate.flux",
								Source: "column: column, fn: math.min",
								Start: ast.Position{
									Column: 34,
									Line:   46,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   46,
									},
									File:   "aggregate.flux",
									Source: "column: column",
									Start: ast.Position{
										Column: 34,
										Line:   46,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   46,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 34,
											Line:   46,
										},
									},
								},
								Name: "column",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   46,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 42,
											Line:   46,
										},
									},
								},
								Name: "column",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   46,
									},
									File:   "aggregate.flux",
									Source: "fn: math.min",
									Start: ast.Position{
										Column: 50,
										Line:   46,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   46,
										},
										File:   "aggregate.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 50,
											Line:   46,
										},
									},
								},
								Name: "fn",
							},
							Value: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   46,
										},
										File:   "aggregate.flux",
										Source: "math.min",
										Start: ast.Position{
											Column: 54,
											Line:   46,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   46,
											},
											File:   "aggregate.flux",
											Source: "math",
											Start: ast.Position{
												Column: 54,
												Line:   46,
											},
										},
									},
									Name: "math",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   46,
											},
											File:   "aggregate.flux",
											Source: "min",
											Start: ast.Position{
												Column: 59,
												Line:   46,
											},
										},
									},
									Name: "min",
								},
							},
						}},
						With: nil,
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 63,
								Line:   46,
							},
							File:   "aggregate.flux",
							Source: "_make_selector(column: column, fn: math.min)",
							Start: ast.Position{
								Column: 19,
								Line:   46,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   46,
								},
								File:   "aggregate.flux",
								Source: "_make_selector",
								Start: ast.Position{
									Column: 19,
									Line:   46,
								},
							},
						},
						Name: "_make_selector",
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   46,
							},
							File:   "aggregate.flux",
							Source: "column",
							Start: ast.Position{
								Column: 8,
								Line:   46,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   46,
								},
								File:   "aggregate.flux",
								Source: "column",
								Start: ast.Position{
									Column: 8,
									Line:   46,
								},
							},
						},
						Name: "column",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 63,
						Line:   49,
					},
					File:   "aggregate.flux",
					Source: "max = (column) => _make_selector(column: column, fn: math.max)",
					Start: ast.Position{
						Column: 1,
						Line:   49,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   49,
						},
						File:   "aggregate.flux",
						Source: "max",
						Start: ast.Position{
							Column: 1,
							Line:   49,
						},
					},
				},
				Name: "max",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 63,
							Line:   49,
						},
						File:   "aggregate.flux",
						Source: "(column) => _make_selector(column: column, fn: math.max)",
						Start: ast.Position{
							Column: 7,
							Line:   49,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   49,
								},
								File:   "aggregate.flux",
								Source: "column: column, fn: math.max",
								Start: ast.Position{
									Column: 34,
									Line:   49,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   49,
									},
									File:   "aggregate.flux",
									Source: "column: column",
									Start: ast.Position{
										Column: 34,
										Line:   49,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   49,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 34,
											Line:   49,
										},
									},
								},
								Name: "column",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   49,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 42,
											Line:   49,
										},
									},
								},
								Name: "column",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   49,
									},
									File:   "aggregate.flux",
									Source: "fn: math.max",
									Start: ast.Position{
										Column: 50,
										Line:   49,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   49,
										},
										File:   "aggregate.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 50,
											Line:   49,
										},
									},
								},
								Name: "fn",
							},
							Value: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   49,
										},
										File:   "aggregate.flux",
										Source: "math.max",
										Start: ast.Position{
											Column: 54,
											Line:   49,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   49,
											},
											File:   "aggregate.flux",
											Source: "math",
											Start: ast.Position{
												Column: 54,
												Line:   49,
											},
										},
									},
									Name: "math",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   49,
											},
											File:   "aggregate.flux",
											Source: "max",
											Start: ast.Position{
												Column: 59,
												Line:   49,
											},
										},
									},
									Name: "max",
								},
							},
						}},
						With: nil,
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 63,
								Line:   49,
							},
							File:   "aggregate.flux",
							Source: "_make_selector(column: column, fn: math.max)",
							Start: ast.Position{
								Column: 19,
								Line:   49,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   49,
								},
								File:   "aggregate.flux",
								Source: "_make_selector",
								Start: ast.Position{
									Column: 19,
									Line:   49,
								},
							},
						},
						Name: "_make_selector",
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   49,
							},
							File:   "aggregate.flux",
							Source: "column",
							Start: ast.Position{
								Column: 8,
								Line:   49,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   49,
								},
								File:   "aggregate.flux",
								Source: "column",
								Start: ast.Position{
									Column: 8,
									Line:   49,
								},
							},
						},
						Name: "column",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   58,
					},
					File:   "aggregate.flux",
					Source: "sum = (column) => ({\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   52,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   52,
						},
						File:   "aggregate.flux",
						Source: "sum",
						Start: ast.Position{
							Column: 1,
							Line:   52,
						},
					},
				},
				Name: "sum",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   58,
						},
						File:   "aggregate.flux",
						Source: "(column) => ({\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n})",
						Start: ast.Position{
							Column: 7,
							Line:   52,
						},
					},
				},
				Body: &ast.ParenExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   58,
							},
							File:   "aggregate.flux",
							Source: "({\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n})",
							Start: ast.Position{
								Column: 19,
								Line:   52,
							},
						},
					},
					Expression: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 2,
									Line:   58,
								},
								File:   "aggregate.flux",
								Source: "{\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n}",
								Start: ast.Position{
									Column: 20,
									Line:   52,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   53,
									},
									File:   "aggregate.flux",
									Source: "init: (values) => math.sum(values)",
									Start: ast.Position{
										Column: 2,
										Line:   53,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   53,
										},
										File:   "aggregate.flux",
										Source: "init",
										Start: ast.Position{
											Column: 2,
											Line:   53,
										},
									},
								},
								Name: "init",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   53,
										},
										File:   "aggregate.flux",
										Source: "(values) => math.sum(values)",
										Start: ast.Position{
											Column: 8,
											Line:   53,
										},
									},
								},
								Body: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   53,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 29,
													Line:   53,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   53,
													},
													File:   "aggregate.flux",
													Source: "values",
													Start: ast.Position{
														Column: 29,
														Line:   53,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   53,
														},
														File:   "aggregate.flux",
														Source: "values",
														Start: ast.Position{
															Column: 29,
															Line:   53,
														},
													},
												},
												Name: "values",
											},
											Value: nil,
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   53,
											},
											File:   "aggregate.flux",
											Source: "math.sum(values)",
											Start: ast.Position{
												Column: 20,
												Line:   53,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   53,
												},
												File:   "aggregate.flux",
												Source: "math.sum",
												Start: ast.Position{
													Column: 20,
													Line:   53,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   53,
													},
													File:   "aggregate.flux",
													Source: "math",
													Start: ast.Position{
														Column: 20,
														Line:   53,
													},
												},
											},
											Name: "math",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   53,
													},
													File:   "aggregate.flux",
													Source: "sum",
													Start: ast.Position{
														Column: 25,
														Line:   53,
													},
												},
											},
											Name: "sum",
										},
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   53,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 9,
												Line:   53,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   53,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 9,
													Line:   53,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   56,
									},
									File:   "aggregate.flux",
									Source: "reduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t}",
									Start: ast.Position{
										Column: 2,
										Line:   54,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   54,
										},
										File:   "aggregate.flux",
										Source: "reduce",
										Start: ast.Position{
											Column: 2,
											Line:   54,
										},
									},
								},
								Name: "reduce",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 3,
											Line:   56,
										},
										File:   "aggregate.flux",
										Source: "(values, state) => {\n\t\treturn state + math.sum(values)\n\t}",
										Start: ast.Position{
											Column: 10,
											Line:   54,
										},
									},
								},
								Body: &ast.Block{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 3,
												Line:   56,
											},
											File:   "aggregate.flux",
											Source: "{\n\t\treturn state + math.sum(values)\n\t}",
											Start: ast.Position{
												Column: 29,
												Line:   54,
											},
										},
									},
									Body: []ast.Statement{&ast.ReturnStatement{
										Argument: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   55,
													},
													File:   "aggregate.flux",
													Source: "state + math.sum(values)",
													Start: ast.Position{
														Column: 10,
														Line:   55,
													},
												},
											},
											Left: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   55,
														},
														File:   "aggregate.flux",
														Source: "state",
														Start: ast.Position{
															Column: 10,
															Line:   55,
														},
													},
												},
												Name: "state",
											},
											Operator: 5,
											Right: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   55,
															},
															File:   "aggregate.flux",
															Source: "values",
															Start: ast.Position{
																Column: 27,
																Line:   55,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   55,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 27,
																	Line:   55,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 33,
																		Line:   55,
																	},
																	File:   "aggregate.flux",
																	Source: "values",
																	Start: ast.Position{
																		Column: 27,
																		Line:   55,
																	},
																},
															},
															Name: "values",
														},
														Value: nil,
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   55,
														},
														File:   "aggregate.flux",
														Source: "math.sum(values)",
														Start: ast.Position{
															Column: 18,
															Line:   55,
														},
													},
												},
												Callee: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   55,
															},
															File:   "aggregate.flux",
															Source: "math.sum",
															Start: ast.Position{
																Column: 18,
																Line:   55,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   55,
																},
																File:   "aggregate.flux",
																Source: "math",
																Start: ast.Position{
																	Column: 18,
																	Line:   55,
																},
															},
														},
														Name: "math",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 26,
																	Line:   55,
																},
																File:   "aggregate.flux",
																Source: "sum",
																Start: ast.Position{
																	Column: 23,
																	Line:   55,
																},
															},
														},
														Name: "sum",
													},
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   55,
												},
												File:   "aggregate.flux",
												Source: "return state + math.sum(values)",
												Start: ast.Position{
													Column: 3,
													Line:   55,
												},
											},
										},
									}},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   54,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 11,
												Line:   54,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   54,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 11,
													Line:   54,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   54,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 19,
												Line:   54,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   54,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 19,
													Line:   54,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   57,
									},
									File:   "aggregate.flux",
									Source: "compute: (state) => state",
									Start: ast.Position{
										Column: 2,
										Line:   57,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   57,
										},
										File:   "aggregate.flux",
										Source: "compute",
										Start: ast.Position{
											Column: 2,
											Line:   57,
										},
									},
								},
								Name: "compute",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   57,
										},
										File:   "aggregate.flux",
										Source: "(state) => state",
										Start: ast.Position{
											Column: 11,
											Line:   57,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   57,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 22,
												Line:   57,
											},
										},
									},
									Name: "state",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   57,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 12,
												Line:   57,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   57,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 12,
													Line:   57,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}},
						With: nil,
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   52,
							},
							File:   "aggregate.flux",
							Source: "column",
							Start: ast.Position{
								Column: 8,
								Line:   52,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   52,
								},
								File:   "aggregate.flux",
								Source: "column",
								Start: ast.Position{
									Column: 8,
									Line:   52,
								},
							},
						},
						Name: "column",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   68,
					},
					File:   "aggregate.flux",
					Source: "count = (column) => ({\n\tcolumn: column,\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   61,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   61,
						},
						File:   "aggregate.flux",
						Source: "count",
						Start: ast.Position{
							Column: 1,
							Line:   61,
						},
					},
				},
				Name: "count",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   68,
						},
						File:   "aggregate.flux",
						Source: "(column) => ({\n\tcolumn: column,\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n})",
						Start: ast.Position{
							Column: 9,
							Line:   61,
						},
					},
				},
				Body: &ast.ParenExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   68,
							},
							File:   "aggregate.flux",
							Source: "({\n\tcolumn: column,\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n})",
							Start: ast.Position{
								Column: 21,
								Line:   61,
							},
						},
					},
					Expression: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 2,
									Line:   68,
								},
								File:   "aggregate.flux",
								Source: "{\n\tcolumn: column,\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n}",
								Start: ast.Position{
									Column: 22,
									Line:   61,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   62,
									},
									File:   "aggregate.flux",
									Source: "column: column",
									Start: ast.Position{
										Column: 2,
										Line:   62,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   62,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 2,
											Line:   62,
										},
									},
								},
								Name: "column",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   62,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 10,
											Line:   62,
										},
									},
								},
								Name: "column",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   63,
									},
									File:   "aggregate.flux",
									Source: "init: (values) => length(arr: values)",
									Start: ast.Position{
										Column: 2,
										Line:   63,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   63,
										},
										File:   "aggregate.flux",
										Source: "init",
										Start: ast.Position{
											Column: 2,
											Line:   63,
										},
									},
								},
								Name: "init",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   63,
										},
										File:   "aggregate.flux",
										Source: "(values) => length(arr: values)",
										Start: ast.Position{
											Column: 8,
											Line:   63,
										},
									},
								},
								Body: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   63,
												},
												File:   "aggregate.flux",
												Source: "arr: values",
												Start: ast.Position{
													Column: 27,
													Line:   63,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   63,
													},
													File:   "aggregate.flux",
													Source: "arr: values",
													Start: ast.Position{
														Column: 27,
														Line:   63,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   63,
														},
														File:   "aggregate.flux",
														Source: "arr",
														Start: ast.Position{
															Column: 27,
															Line:   63,
														},
													},
												},
												Name: "arr",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   63,
														},
														File:   "aggregate.flux",
														Source: "values",
														Start: ast.Position{
															Column: 32,
															Line:   63,
														},
													},
												},
												Name: "values",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   63,
											},
											File:   "aggregate.flux",
											Source: "length(arr: values)",
											Start: ast.Position{
												Column: 20,
												Line:   63,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   63,
												},
												File:   "aggregate.flux",
												Source: "length",
												Start: ast.Position{
													Column: 20,
													Line:   63,
												},
											},
										},
										Name: "length",
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   63,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 9,
												Line:   63,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   63,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 9,
													Line:   63,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   66,
									},
									File:   "aggregate.flux",
									Source: "reduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t}",
									Start: ast.Position{
										Column: 2,
										Line:   64,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   64,
										},
										File:   "aggregate.flux",
										Source: "reduce",
										Start: ast.Position{
											Column: 2,
											Line:   64,
										},
									},
								},
								Name: "reduce",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 3,
											Line:   66,
										},
										File:   "aggregate.flux",
										Source: "(values, state) => {\n\t\treturn state + length(arr: values)\n\t}",
										Start: ast.Position{
											Column: 10,
											Line:   64,
										},
									},
								},
								Body: &ast.Block{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 3,
												Line:   66,
											},
											File:   "aggregate.flux",
											Source: "{\n\t\treturn state + length(arr: values)\n\t}",
											Start: ast.Position{
												Column: 29,
												Line:   64,
											},
										},
									},
									Body: []ast.Statement{&ast.ReturnStatement{
										Argument: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   65,
													},
													File:   "aggregate.flux",
													Source: "state + length(arr: values)",
													Start: ast.Position{
														Column: 10,
														Line:   65,
													},
												},
											},
											Left: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   65,
														},
														File:   "aggregate.flux",
														Source: "state",
														Start: ast.Position{
															Column: 10,
															Line:   65,
														},
													},
												},
												Name: "state",
											},
											Operator: 5,
											Right: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   65,
															},
															File:   "aggregate.flux",
															Source: "arr: values",
															Start: ast.Position{
																Column: 25,
																Line:   65,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   65,
																},
																File:   "aggregate.flux",
																Source: "arr: values",
																Start: ast.Position{
																	Column: 25,
																	Line:   65,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 28,
																		Line:   65,
																	},
																	File:   "aggregate.flux",
																	Source: "arr",
																	Start: ast.Position{
																		Column: 25,
																		Line:   65,
																	},
																},
															},
															Name: "arr",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   65,
																	},
																	File:   "aggregate.flux",
																	Source: "values",
																	Start: ast.Position{
																		Column: 30,
																		Line:   65,
																	},
																},
															},
															Name: "values",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   65,
														},
														File:   "aggregate.flux",
														Source: "length(arr: values)",
														Start: ast.Position{
															Column: 18,
															Line:   65,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   65,
															},
															File:   "aggregate.flux",
															Source: "length",
															Start: ast.Position{
																Column: 18,
																Line:   65,
															},
														},
													},
													Name: "length",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   65,
												},
												File:   "aggregate.flux",
												Source: "return state + length(arr: values)",
												Start: ast.Position{
													Column: 3,
													Line:   65,
												},
											},
										},
									}},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   64,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 11,
												Line:   64,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   64,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 11,
													Line:   64,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   64,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 19,
												Line:   64,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   64,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 19,
													Line:   64,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   67,
									},
									File:   "aggregate.flux",
									Source: "compute: (state) => state",
									Start: ast.Position{
										Column: 2,
										Line:   67,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   67,
										},
										File:   "aggregate.flux",
										Source: "compute",
										Start: ast.Position{
											Column: 2,
											Line:   67,
										},
									},
								},
								Name: "compute",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   67,
										},
										File:   "aggregate.flux",
										Source: "(state) => state",
										Start: ast.Position{
											Column: 11,
											Line:   67,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   67,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 22,
												Line:   67,
											},
										},
									},
									Name: "state",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   67,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 12,
												Line:   67,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   67,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 12,
													Line:   67,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}},
						With: nil,
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   61,
							},
							File:   "aggregate.flux",
							Source: "column",
							Start: ast.Position{
								Column: 10,
								Line:   61,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   61,
								},
								File:   "aggregate.flux",
								Source: "column",
								Start: ast.Position{
									Column: 10,
									Line:   61,
								},
							},
						},
						Name: "column",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   82,
					},
					File:   "aggregate.flux",
					Source: "mean = (column) => ({\n\tcolumn: column,\n\tinit: (values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t}),\n\treduce: (values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t}),\n\tcompute: (state) => float(v: state.sum) / float(v: state.count),\n})",
					Start: ast.Position{
						Column: 1,
						Line:   71,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   71,
						},
						File:   "aggregate.flux",
						Source: "mean",
						Start: ast.Position{
							Column: 1,
							Line:   71,
						},
					},
				},
				Name: "mean",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   82,
						},
						File:   "aggregate.flux",
						Source: "(column) => ({\n\tcolumn: column,\n\tinit: (values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t}),\n\treduce: (values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t}),\n\tcompute: (state) => float(v: state.sum) / float(v: state.count),\n})",
						Start: ast.Position{
							Column: 8,
							Line:   71,
						},
					},
				},
				Body: &ast.ParenExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   82,
							},
							File:   "aggregate.flux",
							Source: "({\n\tcolumn: column,\n\tinit: (values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t}),\n\treduce: (values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t}),\n\tcompute: (state) => float(v: state.sum) / float(v: state.count),\n})",
							Start: ast.Position{
								Column: 20,
								Line:   71,
							},
						},
					},
					Expression: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 2,
									Line:   82,
								},
								File:   "aggregate.flux",
								Source: "{\n\tcolumn: column,\n\tinit: (values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t}),\n\treduce: (values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t}),\n\tcompute: (state) => float(v: state.sum) / float(v: state.count),\n}",
								Start: ast.Position{
									Column: 21,
									Line:   71,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   72,
									},
									File:   "aggregate.flux",
									Source: "column: column",
									Start: ast.Position{
										Column: 2,
										Line:   72,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   72,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 2,
											Line:   72,
										},
									},
								},
								Name: "column",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   72,
										},
										File:   "aggregate.flux",
										Source: "column",
										Start: ast.Position{
											Column: 10,
											Line:   72,
										},
									},
								},
								Name: "column",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   76,
									},
									File:   "aggregate.flux",
									Source: "init: (values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t})",
									Start: ast.Position{
										Column: 2,
										Line:   73,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   73,
										},
										File:   "aggregate.flux",
										Source: "init",
										Start: ast.Position{
											Column: 2,
											Line:   73,
										},
									},
								},
								Name: "init",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 4,
											Line:   76,
										},
										File:   "aggregate.flux",
										Source: "(values) => ({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t})",
										Start: ast.Position{
											Column: 8,
											Line:   73,
										},
									},
								},
								Body: &ast.ParenExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   76,
											},
											File:   "aggregate.flux",
											Source: "({\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t})",
											Start: ast.Position{
												Column: 20,
												Line:   73,
											},
										},
									},
									Expression: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 3,
													Line:   76,
												},
												File:   "aggregate.flux",
												Source: "{\n\t\tsum: math.sum(values),\n\t\tcount: length(arr: values),\n\t}",
												Start: ast.Position{
													Column: 21,
													Line:   73,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   74,
													},
													File:   "aggregate.flux",
													Source: "sum: math.sum(values)",
													Start: ast.Position{
														Column: 3,
														Line:   74,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 6,
															Line:   74,
														},
														File:   "aggregate.flux",
														Source: "sum",
														Start: ast.Position{
															Column: 3,
															Line:   74,
														},
													},
												},
												Name: "sum",
											},
											Value: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   74,
															},
															File:   "aggregate.flux",
															Source: "values",
															Start: ast.Position{
																Column: 17,
																Line:   74,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   74,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 17,
																	Line:   74,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 23,
																		Line:   74,
																	},
																	File:   "aggregate.flux",
																	Source: "values",
																	Start: ast.Position{
																		Column: 17,
																		Line:   74,
																	},
																},
															},
															Name: "values",
														},
														Value: nil,
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   74,
														},
														File:   "aggregate.flux",
														Source: "math.sum(values)",
														Start: ast.Position{
															Column: 8,
															Line:   74,
														},
													},
												},
												Callee: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   74,
															},
															File:   "aggregate.flux",
															Source: "math.sum",
															Start: ast.Position{
																Column: 8,
																Line:   74,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 12,
																	Line:   74,
																},
																File:   "aggregate.flux",
																Source: "math",
																Start: ast.Position{
																	Column: 8,
																	Line:   74,
																},
															},
														},
														Name: "math",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   74,
																},
																File:   "aggregate.flux",
																Source: "sum",
																Start: ast.Position{
																	Column: 13,
																	Line:   74,
																},
															},
														},
														Name: "sum",
													},
												},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   75,
													},
													File:   "aggregate.flux",
													Source: "count: length(arr: values)",
													Start: ast.Position{
														Column: 3,
														Line:   75,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 8,
															Line:   75,
														},
														File:   "aggregate.flux",
														Source: "count",
														Start: ast.Position{
															Column: 3,
															Line:   75,
														},
													},
												},
												Name: "count",
											},
											Value: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   75,
															},
															File:   "aggregate.flux",
															Source: "arr: values",
															Start: ast.Position{
																Column: 17,
																Line:   75,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 28,
																	Line:   75,
																},
																File:   "aggregate.flux",
																Source: "arr: values",
																Start: ast.Position{
																	Column: 17,
																	Line:   75,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 20,
																		Line:   75,
																	},
																	File:   "aggregate.flux",
																	Source: "arr",
																	Start: ast.Position{
																		Column: 17,
																		Line:   75,
																	},
																},
															},
															Name: "arr",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 28,
																		Line:   75,
																	},
																	File:   "aggregate.flux",
																	Source: "values",
																	Start: ast.Position{
																		Column: 22,
																		Line:   75,
																	},
																},
															},
															Name: "values",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   75,
														},
														File:   "aggregate.flux",
														Source: "length(arr: values)",
														Start: ast.Position{
															Column: 10,
															Line:   75,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   75,
															},
															File:   "aggregate.flux",
															Source: "length",
															Start: ast.Position{
																Column: 10,
																Line:   75,
															},
														},
													},
													Name: "length",
												},
											},
										}},
										With: nil,
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   73,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 9,
												Line:   73,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   73,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 9,
													Line:   73,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   80,
									},
									File:   "aggregate.flux",
									Source: "reduce: (values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t})",
									Start: ast.Position{
										Column: 2,
										Line:   77,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   77,
										},
										File:   "aggregate.flux",
										Source: "reduce",
										Start: ast.Position{
											Column: 2,
											Line:   77,
										},
									},
								},
								Name: "reduce",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 4,
											Line:   80,
										},
										File:   "aggregate.flux",
										Source: "(values, state) => ({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t})",
										Start: ast.Position{
											Column: 10,
											Line:   77,
										},
									},
								},
								Body: &ast.ParenExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   80,
											},
											File:   "aggregate.flux",
											Source: "({\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t})",
											Start: ast.Position{
												Column: 29,
												Line:   77,
											},
										},
									},
									Expression: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 3,
													Line:   80,
												},
												File:   "aggregate.flux",
												Source: "{\n\t\tsum: state.sum + math.sum(values),\n\t\tcount: state.count + length(arr: values),\n\t}",
												Start: ast.Position{
													Column: 30,
													Line:   77,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   78,
													},
													File:   "aggregate.flux",
													Source: "sum: state.sum + math.sum(values)",
													Start: ast.Position{
														Column: 3,
														Line:   78,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 6,
															Line:   78,
														},
														File:   "aggregate.flux",
														Source: "sum",
														Start: ast.Position{
															Column: 3,
															Line:   78,
														},
													},
												},
												Name: "sum",
											},
											Value: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   78,
														},
														File:   "aggregate.flux",
														Source: "state.sum + math.sum(values)",
														Start: ast.Position{
															Column: 8,
															Line:   78,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   78,
															},
															File:   "aggregate.flux",
															Source: "state.sum",
															Start: ast.Position{
																Column: 8,
																Line:   78,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 13,
																	Line:   78,
																},
																File:   "aggregate.flux",
																Source: "state",
																Start: ast.Position{
																	Column: 8,
																	Line:   78,
																},
															},
														},
														Name: "state",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   78,
																},
																File:   "aggregate.flux",
																Source: "sum",
																Start: ast.Position{
																	Column: 14,
																	Line:   78,
																},
															},
														},
														Name: "sum",
													},
												},
												Operator: 5,
												Right: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   78,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 29,
																	Line:   78,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   78,
																	},
																	File:   "aggregate.flux",
																	Source: "values",
																	Start: ast.Position{
																		Column: 29,
																		Line:   78,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   78,
																		},
																		File:   "aggregate.flux",
																		Source: "values",
																		Start: ast.Position{
																			Column: 29,
																			Line:   78,
																		},
																	},
																},
																Name: "values",
															},
															Value: nil,
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   78,
															},
															File:   "aggregate.flux",
															Source: "math.sum(values)",
															Start: ast.Position{
																Column: 20,
																Line:   78,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 28,
																	Line:   78,
																},
																File:   "aggregate.flux",
																Source: "math.sum",
																Start: ast.Position{
																	Column: 20,
																	Line:   78,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   78,
																	},
																	File:   "aggregate.flux",
																	Source: "math",
																	Start: ast.Position{
																		Column: 20,
																		Line:   78,
																	},
																},
															},
															Name: "math",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 28,
																		Line:   78,
																	},
																	File:   "aggregate.flux",
																	Source: "sum",
																	Start: ast.Position{
																		Column: 25,
																		Line:   78,
																	},
																},
															},
															Name: "sum",
														},
													},
												},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   79,
													},
													File:   "aggregate.flux",
													Source: "count: state.count + length(arr: values)",
													Start: ast.Position{
														Column: 3,
														Line:   79,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 8,
															Line:   79,
														},
														File:   "aggregate.flux",
														Source: "count",
														Start: ast.Position{
															Column: 3,
															Line:   79,
														},
													},
												},
												Name: "count",
											},
											Value: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   79,
														},
														File:   "aggregate.flux",
														Source: "state.count + length(arr: values)",
														Start: ast.Position{
															Column: 10,
															Line:   79,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   79,
															},
															File:   "aggregate.flux",
															Source: "state.count",
															Start: ast.Position{
																Column: 10,
																Line:   79,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   79,
																},
																File:   "aggregate.flux",
																Source: "state",
																Start: ast.Position{
																	Column: 10,
																	Line:   79,
																},
															},
														},
														Name: "state",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   79,
																},
																File:   "aggregate.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 16,
																	Line:   79,
																},
															},
														},
														Name: "count",
													},
												},
												Operator: 5,
												Right: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   79,
																},
																File:   "aggregate.flux",
																Source: "arr: values",
																Start: ast.Position{
																	Column: 31,
																	Line:   79,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   79,
																	},
																	File:   "aggregate.flux",
																	Source: "arr: values",
																	Start: ast.Position{
																		Column: 31,
																		Line:   79,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   79,
																		},
																		File:   "aggregate.flux",
																		Source: "arr",
																		Start: ast.Position{
																			Column: 31,
																			Line:   79,
																		},
																	},
																},
																Name: "arr",
															},
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   79,
																		},
																		File:   "aggregate.flux",
																		Source: "values",
																		Start: ast.Position{
																			Column: 36,
																			Line:   79,
																		},
																	},
																},
																Name: "values",
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   79,
															},
															File:   "aggregate.flux",
															Source: "length(arr: values)",
															Start: ast.Position{
																Column: 24,
																Line:   79,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   79,
																},
																File:   "aggregate.flux",
																Source: "length",
																Start: ast.Position{
																	Column: 24,
																	Line:   79,
																},
															},
														},
														Name: "length",
													},
												},
											},
										}},
										With: nil,
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   77,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 11,
												Line:   77,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   77,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 11,
													Line:   77,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   77,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 19,
												Line:   77,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   77,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 19,
													Line:   77,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   81,
									},
									File:   "aggregate.flux",
									Source: "compute: (state) => float(v: state.sum) / float(v: state.count)",
									Start: ast.Position{
										Column: 2,
										Line:   81,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   81,
										},
										File:   "aggregate.flux",
										Source: "compute",
										Start: ast.Position{
											Column: 2,
											Line:   81,
										},
									},
								},
								Name: "compute",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   81,
										},
										File:   "aggregate.flux",
										Source: "(state) => float(v: state.sum) / float(v: state.count)",
										Start: ast.Position{
											Column: 11,
											Line:   81,
										},
									},
								},
								Body: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   81,
											},
											File:   "aggregate.flux",
											Source: "float(v: state.sum) / float(v: state.count)",
											Start: ast.Position{
												Column: 22,
												Line:   81,
											},
										},
									},
									Left: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   81,
													},
													File:   "aggregate.flux",
													Source: "v: state.sum",
													Start: ast.Position{
														Column: 28,
														Line:   81,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   81,
														},
														File:   "aggregate.flux",
														Source: "v: state.sum",
														Start: ast.Position{
															Column: 28,
															Line:   81,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   81,
															},
															File:   "aggregate.flux",
															Source: "v",
															Start: ast.Position{
																Column: 28,
																Line:   81,
															},
														},
													},
													Name: "v",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   81,
															},
															File:   "aggregate.flux",
															Source: "state.sum",
															Start: ast.Position{
																Column: 31,
																Line:   81,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   81,
																},
																File:   "aggregate.flux",
																Source: "state",
																Start: ast.Position{
																	Column: 31,
																	Line:   81,
																},
															},
														},
														Name: "state",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   81,
																},
																File:   "aggregate.flux",
																Source: "sum",
																Start: ast.Position{
																	Column: 37,
																	Line:   81,
																},
															},
														},
														Name: "sum",
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   81,
												},
												File:   "aggregate.flux",
												Source: "float(v: state.sum)",
												Start: ast.Position{
													Column: 22,
													Line:   81,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   81,
													},
													File:   "aggregate.flux",
													Source: "float",
													Start: ast.Position{
														Column: 22,
														Line:   81,
													},
												},
											},
											Name: "float",
										},
									},
									Operator: 2,
									Right: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   81,
													},
													File:   "aggregate.flux",
													Source: "v: state.count",
													Start: ast.Position{
														Column: 50,
														Line:   81,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 64,
															Line:   81,
														},
														File:   "aggregate.flux",
														Source: "v: state.count",
														Start: ast.Position{
															Column: 50,
															Line:   81,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   81,
															},
															File:   "aggregate.flux",
															Source: "v",
															Start: ast.Position{
																Column: 50,
																Line:   81,
															},
														},
													},
													Name: "v",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   81,
															},
															File:   "aggregate.flux",
															Source: "state.count",
															Start: ast.Position{
																Column: 53,
																Line:   81,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   81,
																},
																File:   "aggregate.flux",
																Source: "state",
																Start: ast.Position{
																	Column: 53,
																	Line:   81,
																},
															},
														},
														Name: "state",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   81,
																},
																File:   "aggregate.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 59,
																	Line:   81,
																},
															},
														},
														Name: "count",
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   81,
												},
												File:   "aggregate.flux",
												Source: "float(v: state.count)",
												Start: ast.Position{
													Column: 44,
													Line:   81,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   81,
													},
													File:   "aggregate.flux",
													Source: "float",
													Start: ast.Position{
														Column: 44,
														Line:   81,
													},
												},
											},
											Name: "float",
										},
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   81,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 12,
												Line:   81,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   81,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 12,
													Line:   81,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}},
						With: nil,
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   71,
							},
							File:   "aggregate.flux",
							Source: "column",
							Start: ast.Position{
								Column: 9,
								Line:   71,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   71,
								},
								File:   "aggregate.flux",
								Source: "column",
								Start: ast.Position{
									Column: 9,
									Line:   71,
								},
							},
						},
						Name: "column",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   3,
					},
					File:   "aggregate.flux",
					Source: "import \"contrib/jsternberg/math\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   3,
						},
						File:   "aggregate.flux",
						Source: "\"contrib/jsternberg/math\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "contrib/jsternberg/math",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "aggregate.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   1,
					},
					File:   "aggregate.flux",
					Source: "package aggregate",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						File:   "aggregate.flux",
						Source: "aggregate",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "aggregate",
			},
		},
	}},
	Package: "aggregate",
	Path:    "contrib/jsternberg/aggregate",
}
