// DO NOT EDIT: This file is autogenerated via the builtin command.

package sample

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   51,
				},
				File:   "sample.flux",
				Source: "package sample\n\nimport \"csv\"\n\n// The sample package provides tools for generating and incrementing sample data\n// and writing it to InfluxDB at regular intervals, typically in a task.\n\n// SeedData takes annotated CSV and appends a _time column with the current time.\n// Input CSV seed data should not include a _start column.\nseedData = (seedCSV) =>\n  csv.from(csv: seedCSV)\n    |> map(fn: (r) => ({ r with _time: now() }))\n\n// CheckForPreviousData takes a stream of tables and checks for a _start column\n// in any of the tables. If the _start column exists, it indicates the stream\n// includes data returned from a query result and not just seed data.\n// If it detects previous data, it returns true. If not, it returns false.\ncheckForPreviousData = (tables) => {\n  existing_table = tables |> findColumn(fn: (key) => exists key._start, column: \"_start\")\n  isPresent = if length(arr: existing_table) == 0 then false else true\n  return isPresent\n}\n\n// MultiplyDuration takes a duration value and multiplies it by x.\n// d is a duration. x is a float.\n// This function is used to ensure the query for previous data more than covers\n// the interval batches are written at.\nmultiplyDuration = (d,x) => duration(v: int(v: float(v: int(v: d)) * x))\n\n// Generate takes seed data and previously written data, unions the streams together,\n// filters the data based on whether or not previously written data is returned,\n// increments the data using a map function, and returns the incremented data.\n// bucket determines the bucket to query.\n// seedCSV is raw annotated CSV used to seed the data set.\n// incrementFn is a function that increments values in the data set.\n// every should match the interval at which generate runs.\n// every * 1.5 determines the query range to query the last batch of data.\n// In the context of a task, every should be set to task.every\n// predicate defines the predicate function used to query the previous batch.\ngenerate = (bucket, seedCSV, incrementFn, every, predicate=(r) => true) => {\n  seed = seedData(seedCSV)\n  data = from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))\n    |> filter(fn: predicate)\n  dataExists = checkForPreviousData(tables: data)\n  updatedData = union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))\n    |> map(fn: incrementFn )\n  return updatedData\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   12,
					},
					File:   "sample.flux",
					Source: "seedData = (seedCSV) =>\n  csv.from(csv: seedCSV)\n    |> map(fn: (r) => ({ r with _time: now() }))",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   10,
						},
						File:   "sample.flux",
						Source: "seedData",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "seedData",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   12,
						},
						File:   "sample.flux",
						Source: "(seedCSV) =>\n  csv.from(csv: seedCSV)\n    |> map(fn: (r) => ({ r with _time: now() }))",
						Start: ast.Position{
							Column: 12,
							Line:   10,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   11,
									},
									File:   "sample.flux",
									Source: "csv: seedCSV",
									Start: ast.Position{
										Column: 12,
										Line:   11,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   11,
										},
										File:   "sample.flux",
										Source: "csv: seedCSV",
										Start: ast.Position{
											Column: 12,
											Line:   11,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   11,
											},
											File:   "sample.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 12,
												Line:   11,
											},
										},
									},
									Name: "csv",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   11,
											},
											File:   "sample.flux",
											Source: "seedCSV",
											Start: ast.Position{
												Column: 17,
												Line:   11,
											},
										},
									},
									Name: "seedCSV",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   11,
								},
								File:   "sample.flux",
								Source: "csv.from(csv: seedCSV)",
								Start: ast.Position{
									Column: 3,
									Line:   11,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   11,
									},
									File:   "sample.flux",
									Source: "csv.from",
									Start: ast.Position{
										Column: 3,
										Line:   11,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   11,
										},
										File:   "sample.flux",
										Source: "csv",
										Start: ast.Position{
											Column: 3,
											Line:   11,
										},
									},
								},
								Name: "csv",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   11,
										},
										File:   "sample.flux",
										Source: "from",
										Start: ast.Position{
											Column: 7,
											Line:   11,
										},
									},
								},
								Name: "from",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   12,
							},
							File:   "sample.flux",
							Source: "csv.from(csv: seedCSV)\n    |> map(fn: (r) => ({ r with _time: now() }))",
							Start: ast.Position{
								Column: 3,
								Line:   11,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   12,
									},
									File:   "sample.flux",
									Source: "fn: (r) => ({ r with _time: now() })",
									Start: ast.Position{
										Column: 12,
										Line:   12,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   12,
										},
										File:   "sample.flux",
										Source: "fn: (r) => ({ r with _time: now() })",
										Start: ast.Position{
											Column: 12,
											Line:   12,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   12,
											},
											File:   "sample.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   12,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   12,
											},
											File:   "sample.flux",
											Source: "(r) => ({ r with _time: now() })",
											Start: ast.Position{
												Column: 16,
												Line:   12,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   12,
												},
												File:   "sample.flux",
												Source: "({ r with _time: now() })",
												Start: ast.Position{
													Column: 23,
													Line:   12,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   12,
													},
													File:   "sample.flux",
													Source: "{ r with _time: now() }",
													Start: ast.Position{
														Column: 24,
														Line:   12,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   12,
														},
														File:   "sample.flux",
														Source: "_time: now()",
														Start: ast.Position{
															Column: 33,
															Line:   12,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   12,
															},
															File:   "sample.flux",
															Source: "_time",
															Start: ast.Position{
																Column: 33,
																Line:   12,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.CallExpression{
													Arguments: nil,
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   12,
															},
															File:   "sample.flux",
															Source: "now()",
															Start: ast.Position{
																Column: 40,
																Line:   12,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   12,
																},
																File:   "sample.flux",
																Source: "now",
																Start: ast.Position{
																	Column: 40,
																	Line:   12,
																},
															},
														},
														Name: "now",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   12,
														},
														File:   "sample.flux",
														Source: "r",
														Start: ast.Position{
															Column: 26,
															Line:   12,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   12,
												},
												File:   "sample.flux",
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   12,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   12,
													},
													File:   "sample.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   12,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   12,
								},
								File:   "sample.flux",
								Source: "map(fn: (r) => ({ r with _time: now() }))",
								Start: ast.Position{
									Column: 8,
									Line:   12,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   12,
									},
									File:   "sample.flux",
									Source: "map",
									Start: ast.Position{
										Column: 8,
										Line:   12,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   10,
							},
							File:   "sample.flux",
							Source: "seedCSV",
							Start: ast.Position{
								Column: 13,
								Line:   10,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   10,
								},
								File:   "sample.flux",
								Source: "seedCSV",
								Start: ast.Position{
									Column: 13,
									Line:   10,
								},
							},
						},
						Name: "seedCSV",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   22,
					},
					File:   "sample.flux",
					Source: "checkForPreviousData = (tables) => {\n  existing_table = tables |> findColumn(fn: (key) => exists key._start, column: \"_start\")\n  isPresent = if length(arr: existing_table) == 0 then false else true\n  return isPresent\n}",
					Start: ast.Position{
						Column: 1,
						Line:   18,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   18,
						},
						File:   "sample.flux",
						Source: "checkForPreviousData",
						Start: ast.Position{
							Column: 1,
							Line:   18,
						},
					},
				},
				Name: "checkForPreviousData",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   22,
						},
						File:   "sample.flux",
						Source: "(tables) => {\n  existing_table = tables |> findColumn(fn: (key) => exists key._start, column: \"_start\")\n  isPresent = if length(arr: existing_table) == 0 then false else true\n  return isPresent\n}",
						Start: ast.Position{
							Column: 24,
							Line:   18,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   22,
							},
							File:   "sample.flux",
							Source: "{\n  existing_table = tables |> findColumn(fn: (key) => exists key._start, column: \"_start\")\n  isPresent = if length(arr: existing_table) == 0 then false else true\n  return isPresent\n}",
							Start: ast.Position{
								Column: 36,
								Line:   18,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   19,
								},
								File:   "sample.flux",
								Source: "existing_table = tables |> findColumn(fn: (key) => exists key._start, column: \"_start\")",
								Start: ast.Position{
									Column: 3,
									Line:   19,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   19,
									},
									File:   "sample.flux",
									Source: "existing_table",
									Start: ast.Position{
										Column: 3,
										Line:   19,
									},
								},
							},
							Name: "existing_table",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   19,
										},
										File:   "sample.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 20,
											Line:   19,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   19,
									},
									File:   "sample.flux",
									Source: "tables |> findColumn(fn: (key) => exists key._start, column: \"_start\")",
									Start: ast.Position{
										Column: 20,
										Line:   19,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 89,
												Line:   19,
											},
											File:   "sample.flux",
											Source: "fn: (key) => exists key._start, column: \"_start\"",
											Start: ast.Position{
												Column: 41,
												Line:   19,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   19,
												},
												File:   "sample.flux",
												Source: "fn: (key) => exists key._start",
												Start: ast.Position{
													Column: 41,
													Line:   19,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   19,
													},
													File:   "sample.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 41,
														Line:   19,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 71,
														Line:   19,
													},
													File:   "sample.flux",
													Source: "(key) => exists key._start",
													Start: ast.Position{
														Column: 45,
														Line:   19,
													},
												},
											},
											Body: &ast.UnaryExpression{
												Argument: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 71,
																Line:   19,
															},
															File:   "sample.flux",
															Source: "key._start",
															Start: ast.Position{
																Column: 61,
																Line:   19,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   19,
																},
																File:   "sample.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 61,
																	Line:   19,
																},
															},
														},
														Name: "key",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   19,
																},
																File:   "sample.flux",
																Source: "_start",
																Start: ast.Position{
																	Column: 65,
																	Line:   19,
																},
															},
														},
														Name: "_start",
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   19,
														},
														File:   "sample.flux",
														Source: "exists key._start",
														Start: ast.Position{
															Column: 54,
															Line:   19,
														},
													},
												},
												Operator: 14,
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   19,
														},
														File:   "sample.flux",
														Source: "key",
														Start: ast.Position{
															Column: 46,
															Line:   19,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   19,
															},
															File:   "sample.flux",
															Source: "key",
															Start: ast.Position{
																Column: 46,
																Line:   19,
															},
														},
													},
													Name: "key",
												},
												Value: nil,
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 89,
													Line:   19,
												},
												File:   "sample.flux",
												Source: "column: \"_start\"",
												Start: ast.Position{
													Column: 73,
													Line:   19,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 79,
														Line:   19,
													},
													File:   "sample.flux",
													Source: "column",
													Start: ast.Position{
														Column: 73,
														Line:   19,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 89,
														Line:   19,
													},
													File:   "sample.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 81,
														Line:   19,
													},
												},
											},
											Value: "_start",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   19,
										},
										File:   "sample.flux",
										Source: "findColumn(fn: (key) => exists key._start, column: \"_start\")",
										Start: ast.Position{
											Column: 30,
											Line:   19,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   19,
											},
											File:   "sample.flux",
											Source: "findColumn",
											Start: ast.Position{
												Column: 30,
												Line:   19,
											},
										},
									},
									Name: "findColumn",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   20,
								},
								File:   "sample.flux",
								Source: "isPresent = if length(arr: existing_table) == 0 then false else true",
								Start: ast.Position{
									Column: 3,
									Line:   20,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   20,
									},
									File:   "sample.flux",
									Source: "isPresent",
									Start: ast.Position{
										Column: 3,
										Line:   20,
									},
								},
							},
							Name: "isPresent",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   20,
										},
										File:   "sample.flux",
										Source: "true",
										Start: ast.Position{
											Column: 67,
											Line:   20,
										},
									},
								},
								Name: "true",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   20,
									},
									File:   "sample.flux",
									Source: "if length(arr: existing_table) == 0 then false else true",
									Start: ast.Position{
										Column: 15,
										Line:   20,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   20,
										},
										File:   "sample.flux",
										Source: "false",
										Start: ast.Position{
											Column: 56,
											Line:   20,
										},
									},
								},
								Name: "false",
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   20,
										},
										File:   "sample.flux",
										Source: "length(arr: existing_table) == 0",
										Start: ast.Position{
											Column: 18,
											Line:   20,
										},
									},
								},
								Left: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   20,
												},
												File:   "sample.flux",
												Source: "arr: existing_table",
												Start: ast.Position{
													Column: 25,
													Line:   20,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   20,
													},
													File:   "sample.flux",
													Source: "arr: existing_table",
													Start: ast.Position{
														Column: 25,
														Line:   20,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   20,
														},
														File:   "sample.flux",
														Source: "arr",
														Start: ast.Position{
															Column: 25,
															Line:   20,
														},
													},
												},
												Name: "arr",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   20,
														},
														File:   "sample.flux",
														Source: "existing_table",
														Start: ast.Position{
															Column: 30,
															Line:   20,
														},
													},
												},
												Name: "existing_table",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   20,
											},
											File:   "sample.flux",
											Source: "length(arr: existing_table)",
											Start: ast.Position{
												Column: 18,
												Line:   20,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   20,
												},
												File:   "sample.flux",
												Source: "length",
												Start: ast.Position{
													Column: 18,
													Line:   20,
												},
											},
										},
										Name: "length",
									},
								},
								Operator: 17,
								Right: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   20,
											},
											File:   "sample.flux",
											Source: "0",
											Start: ast.Position{
												Column: 49,
												Line:   20,
											},
										},
									},
									Value: int64(0),
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   21,
									},
									File:   "sample.flux",
									Source: "isPresent",
									Start: ast.Position{
										Column: 10,
										Line:   21,
									},
								},
							},
							Name: "isPresent",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   21,
								},
								File:   "sample.flux",
								Source: "return isPresent",
								Start: ast.Position{
									Column: 3,
									Line:   21,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   18,
							},
							File:   "sample.flux",
							Source: "tables",
							Start: ast.Position{
								Column: 25,
								Line:   18,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   18,
								},
								File:   "sample.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 25,
									Line:   18,
								},
							},
						},
						Name: "tables",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 73,
						Line:   28,
					},
					File:   "sample.flux",
					Source: "multiplyDuration = (d,x) => duration(v: int(v: float(v: int(v: d)) * x))",
					Start: ast.Position{
						Column: 1,
						Line:   28,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   28,
						},
						File:   "sample.flux",
						Source: "multiplyDuration",
						Start: ast.Position{
							Column: 1,
							Line:   28,
						},
					},
				},
				Name: "multiplyDuration",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 73,
							Line:   28,
						},
						File:   "sample.flux",
						Source: "(d,x) => duration(v: int(v: float(v: int(v: d)) * x))",
						Start: ast.Position{
							Column: 20,
							Line:   28,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   28,
								},
								File:   "sample.flux",
								Source: "v: int(v: float(v: int(v: d)) * x)",
								Start: ast.Position{
									Column: 38,
									Line:   28,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   28,
									},
									File:   "sample.flux",
									Source: "v: int(v: float(v: int(v: d)) * x)",
									Start: ast.Position{
										Column: 38,
										Line:   28,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   28,
										},
										File:   "sample.flux",
										Source: "v",
										Start: ast.Position{
											Column: 38,
											Line:   28,
										},
									},
								},
								Name: "v",
							},
							Value: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   28,
											},
											File:   "sample.flux",
											Source: "v: float(v: int(v: d)) * x",
											Start: ast.Position{
												Column: 45,
												Line:   28,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   28,
												},
												File:   "sample.flux",
												Source: "v: float(v: int(v: d)) * x",
												Start: ast.Position{
													Column: 45,
													Line:   28,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   28,
													},
													File:   "sample.flux",
													Source: "v",
													Start: ast.Position{
														Column: 45,
														Line:   28,
													},
												},
											},
											Name: "v",
										},
										Value: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 71,
														Line:   28,
													},
													File:   "sample.flux",
													Source: "float(v: int(v: d)) * x",
													Start: ast.Position{
														Column: 48,
														Line:   28,
													},
												},
											},
											Left: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 66,
																Line:   28,
															},
															File:   "sample.flux",
															Source: "v: int(v: d)",
															Start: ast.Position{
																Column: 54,
																Line:   28,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 66,
																	Line:   28,
																},
																File:   "sample.flux",
																Source: "v: int(v: d)",
																Start: ast.Position{
																	Column: 54,
																	Line:   28,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 55,
																		Line:   28,
																	},
																	File:   "sample.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 54,
																		Line:   28,
																	},
																},
															},
															Name: "v",
														},
														Value: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 65,
																			Line:   28,
																		},
																		File:   "sample.flux",
																		Source: "v: d",
																		Start: ast.Position{
																			Column: 61,
																			Line:   28,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 65,
																				Line:   28,
																			},
																			File:   "sample.flux",
																			Source: "v: d",
																			Start: ast.Position{
																				Column: 61,
																				Line:   28,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 62,
																					Line:   28,
																				},
																				File:   "sample.flux",
																				Source: "v",
																				Start: ast.Position{
																					Column: 61,
																					Line:   28,
																				},
																			},
																		},
																		Name: "v",
																	},
																	Value: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 65,
																					Line:   28,
																				},
																				File:   "sample.flux",
																				Source: "d",
																				Start: ast.Position{
																					Column: 64,
																					Line:   28,
																				},
																			},
																		},
																		Name: "d",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   28,
																	},
																	File:   "sample.flux",
																	Source: "int(v: d)",
																	Start: ast.Position{
																		Column: 57,
																		Line:   28,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 60,
																			Line:   28,
																		},
																		File:   "sample.flux",
																		Source: "int",
																		Start: ast.Position{
																			Column: 57,
																			Line:   28,
																		},
																	},
																},
																Name: "int",
															},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   28,
														},
														File:   "sample.flux",
														Source: "float(v: int(v: d))",
														Start: ast.Position{
															Column: 48,
															Line:   28,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   28,
															},
															File:   "sample.flux",
															Source: "float",
															Start: ast.Position{
																Column: 48,
																Line:   28,
															},
														},
													},
													Name: "float",
												},
											},
											Operator: 1,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   28,
														},
														File:   "sample.flux",
														Source: "x",
														Start: ast.Position{
															Column: 70,
															Line:   28,
														},
													},
												},
												Name: "x",
											},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   28,
										},
										File:   "sample.flux",
										Source: "int(v: float(v: int(v: d)) * x)",
										Start: ast.Position{
											Column: 41,
											Line:   28,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   28,
											},
											File:   "sample.flux",
											Source: "int",
											Start: ast.Position{
												Column: 41,
												Line:   28,
											},
										},
									},
									Name: "int",
								},
							},
						}},
						With: nil,
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 73,
								Line:   28,
							},
							File:   "sample.flux",
							Source: "duration(v: int(v: float(v: int(v: d)) * x))",
							Start: ast.Position{
								Column: 29,
								Line:   28,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   28,
								},
								File:   "sample.flux",
								Source: "duration",
								Start: ast.Position{
									Column: 29,
									Line:   28,
								},
							},
						},
						Name: "duration",
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   28,
							},
							File:   "sample.flux",
							Source: "d",
							Start: ast.Position{
								Column: 21,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   28,
								},
								File:   "sample.flux",
								Source: "d",
								Start: ast.Position{
									Column: 21,
									Line:   28,
								},
							},
						},
						Name: "d",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   28,
							},
							File:   "sample.flux",
							Source: "x",
							Start: ast.Position{
								Column: 23,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   28,
								},
								File:   "sample.flux",
								Source: "x",
								Start: ast.Position{
									Column: 23,
									Line:   28,
								},
							},
						},
						Name: "x",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   51,
					},
					File:   "sample.flux",
					Source: "generate = (bucket, seedCSV, incrementFn, every, predicate=(r) => true) => {\n  seed = seedData(seedCSV)\n  data = from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))\n    |> filter(fn: predicate)\n  dataExists = checkForPreviousData(tables: data)\n  updatedData = union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))\n    |> map(fn: incrementFn )\n  return updatedData\n}",
					Start: ast.Position{
						Column: 1,
						Line:   40,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   40,
						},
						File:   "sample.flux",
						Source: "generate",
						Start: ast.Position{
							Column: 1,
							Line:   40,
						},
					},
				},
				Name: "generate",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   51,
						},
						File:   "sample.flux",
						Source: "(bucket, seedCSV, incrementFn, every, predicate=(r) => true) => {\n  seed = seedData(seedCSV)\n  data = from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))\n    |> filter(fn: predicate)\n  dataExists = checkForPreviousData(tables: data)\n  updatedData = union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))\n    |> map(fn: incrementFn )\n  return updatedData\n}",
						Start: ast.Position{
							Column: 12,
							Line:   40,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   51,
							},
							File:   "sample.flux",
							Source: "{\n  seed = seedData(seedCSV)\n  data = from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))\n    |> filter(fn: predicate)\n  dataExists = checkForPreviousData(tables: data)\n  updatedData = union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))\n    |> map(fn: incrementFn )\n  return updatedData\n}",
							Start: ast.Position{
								Column: 76,
								Line:   40,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   41,
								},
								File:   "sample.flux",
								Source: "seed = seedData(seedCSV)",
								Start: ast.Position{
									Column: 3,
									Line:   41,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   41,
									},
									File:   "sample.flux",
									Source: "seed",
									Start: ast.Position{
										Column: 3,
										Line:   41,
									},
								},
							},
							Name: "seed",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   41,
										},
										File:   "sample.flux",
										Source: "seedCSV",
										Start: ast.Position{
											Column: 19,
											Line:   41,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   41,
											},
											File:   "sample.flux",
											Source: "seedCSV",
											Start: ast.Position{
												Column: 19,
												Line:   41,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   41,
												},
												File:   "sample.flux",
												Source: "seedCSV",
												Start: ast.Position{
													Column: 19,
													Line:   41,
												},
											},
										},
										Name: "seedCSV",
									},
									Value: nil,
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   41,
									},
									File:   "sample.flux",
									Source: "seedData(seedCSV)",
									Start: ast.Position{
										Column: 10,
										Line:   41,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   41,
										},
										File:   "sample.flux",
										Source: "seedData",
										Start: ast.Position{
											Column: 10,
											Line:   41,
										},
									},
								},
								Name: "seedData",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   44,
								},
								File:   "sample.flux",
								Source: "data = from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))\n    |> filter(fn: predicate)",
								Start: ast.Position{
									Column: 3,
									Line:   42,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   42,
									},
									File:   "sample.flux",
									Source: "data",
									Start: ast.Position{
										Column: 3,
										Line:   42,
									},
								},
							},
							Name: "data",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   42,
												},
												File:   "sample.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 15,
													Line:   42,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   42,
													},
													File:   "sample.flux",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 15,
														Line:   42,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   42,
														},
														File:   "sample.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 15,
															Line:   42,
														},
													},
												},
												Name: "bucket",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   42,
														},
														File:   "sample.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 23,
															Line:   42,
														},
													},
												},
												Name: "bucket",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   42,
											},
											File:   "sample.flux",
											Source: "from(bucket: bucket)",
											Start: ast.Position{
												Column: 10,
												Line:   42,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   42,
												},
												File:   "sample.flux",
												Source: "from",
												Start: ast.Position{
													Column: 10,
													Line:   42,
												},
											},
										},
										Name: "from",
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   43,
										},
										File:   "sample.flux",
										Source: "from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))",
										Start: ast.Position{
											Column: 10,
											Line:   42,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   43,
												},
												File:   "sample.flux",
												Source: "start: multiplyDuration(d: -every, x: 1.5)",
												Start: ast.Position{
													Column: 14,
													Line:   43,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   43,
													},
													File:   "sample.flux",
													Source: "start: multiplyDuration(d: -every, x: 1.5)",
													Start: ast.Position{
														Column: 14,
														Line:   43,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   43,
														},
														File:   "sample.flux",
														Source: "start",
														Start: ast.Position{
															Column: 14,
															Line:   43,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   43,
															},
															File:   "sample.flux",
															Source: "d: -every, x: 1.5",
															Start: ast.Position{
																Column: 38,
																Line:   43,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   43,
																},
																File:   "sample.flux",
																Source: "d: -every",
																Start: ast.Position{
																	Column: 38,
																	Line:   43,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   43,
																	},
																	File:   "sample.flux",
																	Source: "d",
																	Start: ast.Position{
																		Column: 38,
																		Line:   43,
																	},
																},
															},
															Name: "d",
														},
														Value: &ast.UnaryExpression{
															Argument: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   43,
																		},
																		File:   "sample.flux",
																		Source: "every",
																		Start: ast.Position{
																			Column: 42,
																			Line:   43,
																		},
																	},
																},
																Name: "every",
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   43,
																	},
																	File:   "sample.flux",
																	Source: "-every",
																	Start: ast.Position{
																		Column: 41,
																		Line:   43,
																	},
																},
															},
															Operator: 6,
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   43,
																},
																File:   "sample.flux",
																Source: "x: 1.5",
																Start: ast.Position{
																	Column: 49,
																	Line:   43,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   43,
																	},
																	File:   "sample.flux",
																	Source: "x",
																	Start: ast.Position{
																		Column: 49,
																		Line:   43,
																	},
																},
															},
															Name: "x",
														},
														Value: &ast.FloatLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 55,
																		Line:   43,
																	},
																	File:   "sample.flux",
																	Source: "1.5",
																	Start: ast.Position{
																		Column: 52,
																		Line:   43,
																	},
																},
															},
															Value: 1.5,
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   43,
														},
														File:   "sample.flux",
														Source: "multiplyDuration(d: -every, x: 1.5)",
														Start: ast.Position{
															Column: 21,
															Line:   43,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   43,
															},
															File:   "sample.flux",
															Source: "multiplyDuration",
															Start: ast.Position{
																Column: 21,
																Line:   43,
															},
														},
													},
													Name: "multiplyDuration",
												},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   43,
											},
											File:   "sample.flux",
											Source: "range(start: multiplyDuration(d: -every, x: 1.5))",
											Start: ast.Position{
												Column: 8,
												Line:   43,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   43,
												},
												File:   "sample.flux",
												Source: "range",
												Start: ast.Position{
													Column: 8,
													Line:   43,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   44,
									},
									File:   "sample.flux",
									Source: "from(bucket: bucket)\n    |> range(start: multiplyDuration(d: -every, x: 1.5))\n    |> filter(fn: predicate)",
									Start: ast.Position{
										Column: 10,
										Line:   42,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   44,
											},
											File:   "sample.flux",
											Source: "fn: predicate",
											Start: ast.Position{
												Column: 15,
												Line:   44,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   44,
												},
												File:   "sample.flux",
												Source: "fn: predicate",
												Start: ast.Position{
													Column: 15,
													Line:   44,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   44,
													},
													File:   "sample.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 15,
														Line:   44,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   44,
													},
													File:   "sample.flux",
													Source: "predicate",
													Start: ast.Position{
														Column: 19,
														Line:   44,
													},
												},
											},
											Name: "predicate",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   44,
										},
										File:   "sample.flux",
										Source: "filter(fn: predicate)",
										Start: ast.Position{
											Column: 8,
											Line:   44,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   44,
											},
											File:   "sample.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 8,
												Line:   44,
											},
										},
									},
									Name: "filter",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   45,
								},
								File:   "sample.flux",
								Source: "dataExists = checkForPreviousData(tables: data)",
								Start: ast.Position{
									Column: 3,
									Line:   45,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   45,
									},
									File:   "sample.flux",
									Source: "dataExists",
									Start: ast.Position{
										Column: 3,
										Line:   45,
									},
								},
							},
							Name: "dataExists",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   45,
										},
										File:   "sample.flux",
										Source: "tables: data",
										Start: ast.Position{
											Column: 37,
											Line:   45,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   45,
											},
											File:   "sample.flux",
											Source: "tables: data",
											Start: ast.Position{
												Column: 37,
												Line:   45,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   45,
												},
												File:   "sample.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 37,
													Line:   45,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   45,
												},
												File:   "sample.flux",
												Source: "data",
												Start: ast.Position{
													Column: 45,
													Line:   45,
												},
											},
										},
										Name: "data",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   45,
									},
									File:   "sample.flux",
									Source: "checkForPreviousData(tables: data)",
									Start: ast.Position{
										Column: 16,
										Line:   45,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   45,
										},
										File:   "sample.flux",
										Source: "checkForPreviousData",
										Start: ast.Position{
											Column: 16,
											Line:   45,
										},
									},
								},
								Name: "checkForPreviousData",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   49,
								},
								File:   "sample.flux",
								Source: "updatedData = union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))\n    |> map(fn: incrementFn )",
								Start: ast.Position{
									Column: 3,
									Line:   46,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   46,
									},
									File:   "sample.flux",
									Source: "updatedData",
									Start: ast.Position{
										Column: 3,
										Line:   46,
									},
								},
							},
							Name: "updatedData",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   46,
													},
													File:   "sample.flux",
													Source: "tables: [seed,data]",
													Start: ast.Position{
														Column: 23,
														Line:   46,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   46,
														},
														File:   "sample.flux",
														Source: "tables: [seed,data]",
														Start: ast.Position{
															Column: 23,
															Line:   46,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   46,
															},
															File:   "sample.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 23,
																Line:   46,
															},
														},
													},
													Name: "tables",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   46,
															},
															File:   "sample.flux",
															Source: "[seed,data]",
															Start: ast.Position{
																Column: 31,
																Line:   46,
															},
														},
													},
													Elements: []ast.Expression{&ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   46,
																},
																File:   "sample.flux",
																Source: "seed",
																Start: ast.Position{
																	Column: 32,
																	Line:   46,
																},
															},
														},
														Name: "seed",
													}, &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   46,
																},
																File:   "sample.flux",
																Source: "data",
																Start: ast.Position{
																	Column: 37,
																	Line:   46,
																},
															},
														},
														Name: "data",
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   46,
												},
												File:   "sample.flux",
												Source: "union(tables: [seed,data])",
												Start: ast.Position{
													Column: 17,
													Line:   46,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   46,
													},
													File:   "sample.flux",
													Source: "union",
													Start: ast.Position{
														Column: 17,
														Line:   46,
													},
												},
											},
											Name: "union",
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   47,
											},
											File:   "sample.flux",
											Source: "union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)",
											Start: ast.Position{
												Column: 17,
												Line:   46,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   47,
													},
													File:   "sample.flux",
													Source: "fn: (r) => if dataExists then exists r._start else true",
													Start: ast.Position{
														Column: 15,
														Line:   47,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 70,
															Line:   47,
														},
														File:   "sample.flux",
														Source: "fn: (r) => if dataExists then exists r._start else true",
														Start: ast.Position{
															Column: 15,
															Line:   47,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   47,
															},
															File:   "sample.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 15,
																Line:   47,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 70,
																Line:   47,
															},
															File:   "sample.flux",
															Source: "(r) => if dataExists then exists r._start else true",
															Start: ast.Position{
																Column: 19,
																Line:   47,
															},
														},
													},
													Body: &ast.ConditionalExpression{
														Alternate: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 70,
																		Line:   47,
																	},
																	File:   "sample.flux",
																	Source: "true",
																	Start: ast.Position{
																		Column: 66,
																		Line:   47,
																	},
																},
															},
															Name: "true",
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 70,
																	Line:   47,
																},
																File:   "sample.flux",
																Source: "if dataExists then exists r._start else true",
																Start: ast.Position{
																	Column: 26,
																	Line:   47,
																},
															},
														},
														Consequent: &ast.UnaryExpression{
															Argument: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 60,
																			Line:   47,
																		},
																		File:   "sample.flux",
																		Source: "r._start",
																		Start: ast.Position{
																			Column: 52,
																			Line:   47,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 53,
																				Line:   47,
																			},
																			File:   "sample.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 52,
																				Line:   47,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 60,
																				Line:   47,
																			},
																			File:   "sample.flux",
																			Source: "_start",
																			Start: ast.Position{
																				Column: 54,
																				Line:   47,
																			},
																		},
																	},
																	Name: "_start",
																},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   47,
																	},
																	File:   "sample.flux",
																	Source: "exists r._start",
																	Start: ast.Position{
																		Column: 45,
																		Line:   47,
																	},
																},
															},
															Operator: 14,
														},
														Test: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   47,
																	},
																	File:   "sample.flux",
																	Source: "dataExists",
																	Start: ast.Position{
																		Column: 29,
																		Line:   47,
																	},
																},
															},
															Name: "dataExists",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   47,
																},
																File:   "sample.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 20,
																	Line:   47,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   47,
																	},
																	File:   "sample.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 20,
																		Line:   47,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   47,
												},
												File:   "sample.flux",
												Source: "filter(fn: (r) => if dataExists then exists r._start else true)",
												Start: ast.Position{
													Column: 8,
													Line:   47,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   47,
													},
													File:   "sample.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 8,
														Line:   47,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   48,
										},
										File:   "sample.flux",
										Source: "union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))",
										Start: ast.Position{
											Column: 17,
											Line:   46,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   48,
												},
												File:   "sample.flux",
												Source: "fn: (r) => ({ r with _time: now() })",
												Start: ast.Position{
													Column: 12,
													Line:   48,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   48,
													},
													File:   "sample.flux",
													Source: "fn: (r) => ({ r with _time: now() })",
													Start: ast.Position{
														Column: 12,
														Line:   48,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   48,
														},
														File:   "sample.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 12,
															Line:   48,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   48,
														},
														File:   "sample.flux",
														Source: "(r) => ({ r with _time: now() })",
														Start: ast.Position{
															Column: 16,
															Line:   48,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   48,
															},
															File:   "sample.flux",
															Source: "({ r with _time: now() })",
															Start: ast.Position{
																Column: 23,
																Line:   48,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   48,
																},
																File:   "sample.flux",
																Source: "{ r with _time: now() }",
																Start: ast.Position{
																	Column: 24,
																	Line:   48,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   48,
																	},
																	File:   "sample.flux",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 33,
																		Line:   48,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   48,
																		},
																		File:   "sample.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 33,
																			Line:   48,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 45,
																			Line:   48,
																		},
																		File:   "sample.flux",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 40,
																			Line:   48,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   48,
																			},
																			File:   "sample.flux",
																			Source: "now",
																			Start: ast.Position{
																				Column: 40,
																				Line:   48,
																			},
																		},
																	},
																	Name: "now",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   48,
																	},
																	File:   "sample.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 26,
																		Line:   48,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   48,
															},
															File:   "sample.flux",
															Source: "r",
															Start: ast.Position{
																Column: 17,
																Line:   48,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   48,
																},
																File:   "sample.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   48,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   48,
											},
											File:   "sample.flux",
											Source: "map(fn: (r) => ({ r with _time: now() }))",
											Start: ast.Position{
												Column: 8,
												Line:   48,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   48,
												},
												File:   "sample.flux",
												Source: "map",
												Start: ast.Position{
													Column: 8,
													Line:   48,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   49,
									},
									File:   "sample.flux",
									Source: "union(tables: [seed,data])\n    |> filter(fn: (r) => if dataExists then exists r._start else true)\n    |> map(fn: (r) => ({ r with _time: now() }))\n    |> map(fn: incrementFn )",
									Start: ast.Position{
										Column: 17,
										Line:   46,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   49,
											},
											File:   "sample.flux",
											Source: "fn: incrementFn",
											Start: ast.Position{
												Column: 12,
												Line:   49,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   49,
												},
												File:   "sample.flux",
												Source: "fn: incrementFn",
												Start: ast.Position{
													Column: 12,
													Line:   49,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   49,
													},
													File:   "sample.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 12,
														Line:   49,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   49,
													},
													File:   "sample.flux",
													Source: "incrementFn",
													Start: ast.Position{
														Column: 16,
														Line:   49,
													},
												},
											},
											Name: "incrementFn",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   49,
										},
										File:   "sample.flux",
										Source: "map(fn: incrementFn )",
										Start: ast.Position{
											Column: 8,
											Line:   49,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   49,
											},
											File:   "sample.flux",
											Source: "map",
											Start: ast.Position{
												Column: 8,
												Line:   49,
											},
										},
									},
									Name: "map",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   50,
									},
									File:   "sample.flux",
									Source: "updatedData",
									Start: ast.Position{
										Column: 10,
										Line:   50,
									},
								},
							},
							Name: "updatedData",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   50,
								},
								File:   "sample.flux",
								Source: "return updatedData",
								Start: ast.Position{
									Column: 3,
									Line:   50,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   40,
							},
							File:   "sample.flux",
							Source: "bucket",
							Start: ast.Position{
								Column: 13,
								Line:   40,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "bucket",
								Start: ast.Position{
									Column: 13,
									Line:   40,
								},
							},
						},
						Name: "bucket",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   40,
							},
							File:   "sample.flux",
							Source: "seedCSV",
							Start: ast.Position{
								Column: 21,
								Line:   40,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "seedCSV",
								Start: ast.Position{
									Column: 21,
									Line:   40,
								},
							},
						},
						Name: "seedCSV",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   40,
							},
							File:   "sample.flux",
							Source: "incrementFn",
							Start: ast.Position{
								Column: 30,
								Line:   40,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "incrementFn",
								Start: ast.Position{
									Column: 30,
									Line:   40,
								},
							},
						},
						Name: "incrementFn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   40,
							},
							File:   "sample.flux",
							Source: "every",
							Start: ast.Position{
								Column: 43,
								Line:   40,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "every",
								Start: ast.Position{
									Column: 43,
									Line:   40,
								},
							},
						},
						Name: "every",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   40,
							},
							File:   "sample.flux",
							Source: "predicate=(r) => true",
							Start: ast.Position{
								Column: 50,
								Line:   40,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "predicate",
								Start: ast.Position{
									Column: 50,
									Line:   40,
								},
							},
						},
						Name: "predicate",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 60,
									Line:   40,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   40,
									},
									File:   "sample.flux",
									Source: "true",
									Start: ast.Position{
										Column: 67,
										Line:   40,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   40,
									},
									File:   "sample.flux",
									Source: "r",
									Start: ast.Position{
										Column: 61,
										Line:   40,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   40,
										},
										File:   "sample.flux",
										Source: "r",
										Start: ast.Position{
											Column: 61,
											Line:   40,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   3,
					},
					File:   "sample.flux",
					Source: "import \"csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   3,
						},
						File:   "sample.flux",
						Source: "\"csv\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "csv",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "sample.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   1,
					},
					File:   "sample.flux",
					Source: "package sample",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1,
						},
						File:   "sample.flux",
						Source: "sample",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "sample",
			},
		},
	}},
	Package: "sample",
	Path:    "experimental/sample",
}
